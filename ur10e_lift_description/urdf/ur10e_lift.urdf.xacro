<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro" name="ur10e_lift">

  <!-- ── UR macro definitions ─────────────────────────────────────────── -->
  <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro"/>

  <!-- ── wrapper arguments (default: UR-10e) ──────────────────────────── -->
  <xacro:arg name="ur_type"              default="ur10e"/>
  <xacro:arg name="use_fake_hardware"    default="false"/>
  <xacro:arg name="fake_sensor_commands" default="false"/>
  <xacro:property name="ur_type" value="$(arg ur_type)"/>

  <!-- ── world link ───────────────────────────────────────────────────── -->
  <link name="world"/>

  <!-- ── lift mechanism visual parameters ──────────────────────────────── -->
  <xacro:property name="pole_radius" value="0.05"/>      <!-- Thinner pole -->
  <xacro:property name="pole_height" value="1.2"/>       <!-- Fixed pole height -->
  <xacro:property name="platform_size" value="0.18"/>    <!-- Platform size (cube) -->
  <xacro:property name="platform_mass" value="10"/>      <!-- Platform mass -->
  <xacro:property name="lift_stroke" value="1.0"/>       <!-- How far platform moves -->

  <!-- ── fixed lift column (doesn't move) ──────────────────────────────── -->
  <link name="lift_base">
    <!-- Fixed vertical pole -->
    <visual>
      <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0"/>
      <geometry><cylinder radius="${pole_radius}" length="${pole_height}"/></geometry>
      <material name="DarkGrey"><color rgba="0.3 0.3 0.3 1"/></material>
    </visual>
    
    <!-- Base plate -->
    <visual>
      <origin xyz="0 0 0.05" rpy="0 0 0"/>
      <geometry><cylinder radius="0.15" length="0.1"/></geometry>
      <material name="DarkGrey"><color rgba="0.3 0.3 0.3 1"/></material>
    </visual>
    
    <!-- Collision for pole -->
    <collision>
      <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0"/>
      <geometry><cylinder radius="${pole_radius}" length="${pole_height}"/></geometry>
    </collision>
    
    <!-- Collision for base -->
    <collision>
      <origin xyz="0 0 0.05" rpy="0 0 0"/>
      <geometry><cylinder radius="0.15" length="0.1"/></geometry>
    </collision>
    
    <inertial>
      <origin xyz="0 0 ${pole_height/2}" rpy="0 0 0"/>
      <mass value="50"/>
      <inertia ixx="5.0" iyy="5.0" izz="0.5" ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <!-- ── moving platform (slides up/down the pole) ────────────────────── -->
  <link name="lift_platform">
    <!-- Moving platform (cube where robot sits) -->
    <visual>
      <origin xyz="0 0 ${platform_size/2}" rpy="0 0 0"/>
      <geometry><box size="${platform_size} ${platform_size} ${platform_size}"/></geometry>
      <material name="Blue"><color rgba="0.2 0.4 0.8 1"/></material>
    </visual>
    
    <collision>
      <origin xyz="0 0 ${platform_size/2}" rpy="0 0 0"/>
      <geometry><box size="${platform_size} ${platform_size} ${platform_size}"/></geometry>
    </collision>
    
    <inertial>
      <origin xyz="0 0 ${platform_size/2}" rpy="0 0 0"/>
      <mass value="${platform_mass}"/>
      <inertia ixx="${1/12.0*platform_mass*(platform_size*platform_size + platform_size*platform_size)}"
               iyy="${1/12.0*platform_mass*(platform_size*platform_size + platform_size*platform_size)}"
               izz="${1/12.0*platform_mass*(platform_size*platform_size + platform_size*platform_size)}"
               ixy="0" ixz="0" iyz="0"/>
    </inertial>
  </link>

  <!-- ── Connect world to fixed base ───────────────────────────────────── -->
  <joint name="world_to_base" type="fixed">
    <parent link="world"/>
    <child link="lift_base"/>
    <origin xyz="0 0 0" rpy="0 0 0"/>
  </joint>

  <!-- ── Prismatic joint: platform slides along pole ──────────────────── -->
  <joint name="lift_joint" type="prismatic">
    <parent link="lift_base"/>
    <child link="lift_platform"/>
    <origin xyz="0 0 0.15" rpy="0 0 0"/>  <!-- Start 15cm above base -->
    <axis xyz="0 0 1"/>                    <!-- Move in Z direction -->
    <limit lower="0.0" upper="${lift_stroke}" effort="1000" velocity="0.3"/>
    <dynamics damping="5.0"/>
  </joint>

  <!-- ── UR-10e mounted on top of the moving platform ──────────────────── -->
  <xacro:ur_robot
      name="${ur_type}" tf_prefix="${ur_type}_"
      parent="lift_platform"
      joint_limits_parameters_file ="$(find ur_description)/config/${ur_type}/joint_limits.yaml"
      kinematics_parameters_file   ="$(find ur_description)/config/${ur_type}/default_kinematics.yaml"
      physical_parameters_file     ="$(find ur_description)/config/${ur_type}/physical_parameters.yaml"
      visual_parameters_file       ="$(find ur_description)/config/${ur_type}/visual_parameters.yaml"
      use_fake_hardware="false"
      fake_sensor_commands="$(arg fake_sensor_commands)"
      sim_ignition="true"
      generate_ros2_control_tag="true"
      transmission_hw_interface="hardware_interface/PositionJointInterface">
    <origin xyz="0 0 ${platform_size}" rpy="0 0 0"/>  <!-- Sits on top of platform -->
  </xacro:ur_robot>

  <!-- ── ros2_control for the lift joint ──────────────────────────────── -->
  <ros2_control name="LiftSystem" type="system">
    <hardware>
      <plugin>gz_ros2_control/GazeboSystem</plugin>
    </hardware>
    <joint name="lift_joint">
      <command_interface name="position">
        <param name="min">0.0</param>
        <param name="max">1.0</param>
      </command_interface>
      <command_interface name="velocity">
        <param name="min">-0.3</param>
        <param name="max">0.3</param>
      </command_interface>
      <state_interface name="position"/>
      <state_interface name="velocity"/>
    </joint>
  </ros2_control>

  <!-- ── Gazebo ros2_control system plugin ─────────────────────────────── -->
  <gazebo>
    <plugin name="gz_ros2_control::GazeboSimROS2ControlPlugin"
            filename="libgz_ros2_control-system.so">
      <parameters>$(find ur10e_lift_description)/config/ur10e_lift_controllers.yaml</parameters>
      <ros>
        <namespace>sim</namespace>
      </ros>
      <controller_manager_name>controller_manager</controller_manager_name>
    </plugin>
  </gazebo>

</robot>